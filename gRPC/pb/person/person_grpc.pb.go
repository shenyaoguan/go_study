// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: person/person.proto

package person

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersonService_GetPerson_FullMethodName    = "/person.PersonService/GetPerson"
	PersonService_GetPersonIn_FullMethodName  = "/person.PersonService/GetPersonIn"
	PersonService_GetPersonOut_FullMethodName = "/person.PersonService/GetPersonOut"
	PersonService_GetPersonIO_FullMethodName  = "/person.PersonService/GetPersonIO"
)

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	GetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	GetPersonIn(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Person, Person], error)
	GetPersonOut(ctx context.Context, in *Person, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Person], error)
	GetPersonIO(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Person, Person], error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) GetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonService_GetPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetPersonIn(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Person, Person], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[0], PersonService_GetPersonIn_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Person, Person]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersonService_GetPersonInClient = grpc.ClientStreamingClient[Person, Person]

func (c *personServiceClient) GetPersonOut(ctx context.Context, in *Person, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Person], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[1], PersonService_GetPersonOut_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Person, Person]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersonService_GetPersonOutClient = grpc.ServerStreamingClient[Person]

func (c *personServiceClient) GetPersonIO(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Person, Person], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[2], PersonService_GetPersonIO_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Person, Person]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersonService_GetPersonIOClient = grpc.BidiStreamingClient[Person, Person]

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility.
type PersonServiceServer interface {
	GetPerson(context.Context, *Person) (*Person, error)
	GetPersonIn(grpc.ClientStreamingServer[Person, Person]) error
	GetPersonOut(*Person, grpc.ServerStreamingServer[Person]) error
	GetPersonIO(grpc.BidiStreamingServer[Person, Person]) error
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonServiceServer struct{}

func (UnimplementedPersonServiceServer) GetPerson(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonServiceServer) GetPersonIn(grpc.ClientStreamingServer[Person, Person]) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonIn not implemented")
}
func (UnimplementedPersonServiceServer) GetPersonOut(*Person, grpc.ServerStreamingServer[Person]) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonOut not implemented")
}
func (UnimplementedPersonServiceServer) GetPersonIO(grpc.BidiStreamingServer[Person, Person]) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonIO not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}
func (UnimplementedPersonServiceServer) testEmbeddedByValue()                       {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	// If the following call pancis, it indicates UnimplementedPersonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetPersonIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).GetPersonIn(&grpc.GenericServerStream[Person, Person]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersonService_GetPersonInServer = grpc.ClientStreamingServer[Person, Person]

func _PersonService_GetPersonOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Person)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).GetPersonOut(m, &grpc.GenericServerStream[Person, Person]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersonService_GetPersonOutServer = grpc.ServerStreamingServer[Person]

func _PersonService_GetPersonIO_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).GetPersonIO(&grpc.GenericServerStream[Person, Person]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersonService_GetPersonIOServer = grpc.BidiStreamingServer[Person, Person]

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "person.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _PersonService_GetPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPersonIn",
			Handler:       _PersonService_GetPersonIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPersonOut",
			Handler:       _PersonService_GetPersonOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPersonIO",
			Handler:       _PersonService_GetPersonIO_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "person/person.proto",
}
